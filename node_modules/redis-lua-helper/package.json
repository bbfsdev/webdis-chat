{
  "name": "redis-lua-helper",
  "version": "0.2.0",
  "author": {
    "name": "Geerten van Meel"
  },
  "description": "A helper package to load lua scripts for redis featuring a #include macro",
  "main": "./lib/index.js",
  "readmeFilename": "README.md",
  "directories": {
    "example": "example"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/klovadis/redis-lua-helper"
  },
  "keywords": [
    "redis",
    "lua",
    "include",
    "macro"
  ],
  "license": "MIT",
  "readme": "\r\n\r\n\r\n# Purpose\r\n\r\nThis small package is intended to help out with managing Lua scripts for redis as those scripts need\r\nto be sent via the client and can profit from a wrapper. More importantly, this wrapper allows for\r\nscripts to include code that is in other script files via `#include 'file.lua'` which promotes code\r\nreusability.\r\n\r\nNote that this package is client agnostic and still requires you to create a wrapper for your client.\r\nYou may also want to write the created code to new files for debugging purposes.\r\n\r\n# Usage\r\n\r\nInstall this module via npm..\r\n\r\n    npm install redis-lua-helper\r\n\r\n.. and include is as such:\r\n\r\n```javascript\r\nvar RedisLuaHelper = require('redis-lua-helper');\r\nvar rlh = RedisLuaHelper(options);\r\n```\r\n\r\n# #include macro\r\n\r\nIn your lua script files, you may use a `#include 'filename'` macro. This macro will include a\r\ndifferent script at the place where this macro was placed. File paths are relative to the current \r\nfile. Included files may contain macros as well, but circular dependencies will raise errors.\r\n\r\nExample of one Lua script including the other via `#include`:\r\n\r\nFile foo.lua:\r\n```lua\r\nprint('This is foo!')\r\n#include 'bar'\r\n```\r\n\r\nFile bar.lua:\r\n```lua\r\nprint('This is bar!')\r\n```\r\n\r\nProcessed contents when loading foo script:\r\n```lua\r\nprint('This is foo!')\r\n\r\n-- #include bar:\r\nprint('This is bar!')\r\n-- End of bar\r\n```\r\n\r\n# API\r\n\r\n## RLH ( options | scriptPath )\r\n\r\nCreate a new instance of the RedisLuaHelper class, expects either the path of your script folder\r\nor a full configuration object. Below are all possible options and there default values:\r\n\r\n```javascript\r\nvar RedisLuaHelper = require('redis-lua-helper');\r\n\r\n// using an options object\r\nvar rlh = RedisLuaHelper({\r\n\t'root': \t\t__dirname + '/scripts',\r\n\t'macro':\t\t'#include',\r\n\t'extension':\t'lua',\r\n\t'encoding':\t\t'utf8'\r\n});\r\n\r\n// just provide the script path\r\nvar rlh2 = RedisLuaHelper(__dirname + '/scripts');\r\n```\r\n\r\nThe `root` field defines the path relative from which scripts will be loaded. The `extension` forces\r\nthat script files may only be loaded if they share that extension. File `encoding` defaults to utf8\r\nbut can be overridden. The `macro` option allows you to override the default `#include 'file'` to\r\nsomething else.\r\n\r\n\r\n## RLH#load ( fileName1, fileName2, .. callback )\r\n\r\nLoad one or more Lua script files into the instance cache. The callback function should expect an\r\nerror argument and an array of loaded script files. Examples:\r\n\r\n```javascript\r\n\t// load a single script\r\n    rlh.load('myscript', function (err, scripts) {} );\r\n\r\n\t// you can load any amount of scripts in this fashion\r\n\trlh.load('myscript1', 'myscript2', function (err, scripts) {} );\r\n\r\n    // filenames can be provided as an array as well\r\n\trlh.load(['myscript3', 'myscript4'], function (err, scripts) {} );\r\n```\r\n\r\nNotice: Right now, checking for circular dependencies may cause problems if you try to call `load`\r\nmultiple times in a row before awaiting the first call to finish. To avoid this, you should place\r\nall filenames that you wish to load in an array and call `load` once.\r\n\r\n\r\n## RLH#loadDir ( dirpath, callback )\r\n\r\nLoads all script files in a given directory, relative to the root directory. Does not include files \r\nin subdirectories. If the dirpath argument is omitted, the root directory will be used instead.\r\n\r\n```javascript\r\n    // load all files in the root directory (not including subdirectories)\r\n\trlh.loadDir( function (err, scripts) {} );\r\n\r\n\t// load all files in /root/subdir\r\n\trlh.loadDir( 'subdir', function (err, scripts) {} );\r\n```\r\n\r\n## RLH#code ( scriptName )\r\n\r\nReturns the code of a previously loaded script. You must load a script first before you can access\r\nits code.\r\n\r\n```javascript\r\n    var code = rlh.code('myscript');\r\n```\r\n\r\n## RLH#shasum ( scriptName )\r\n\r\nReturns the shasum of a previously loaded script. You must load a script first before you can access\r\nits shasum.\r\n\r\n```javascript\r\n\t// returns the scripts shasum\r\n\t// i.e. 6b1bf486c81ceb7edf3c093f4c48582e38c0e791\r\n    var shasum = rlh.shasum('myscript');\r\n```\r\n\r\n## RLH#keys ( scriptName )\r\n\r\nReturns the number of expected KEYS of a previously loaded script. You must load a script first before \r\nyou can access its keys.\r\n\r\n```javascript\r\n\t// returns the number of keys that a script expects\r\n\t// i.e. the script below will return 2\r\n    var keys = rlh.keys('myscript');\r\n```\r\n\r\n```lua\r\n    -- example script, rlh.keys() will return 2\r\n    local foo = KEYS[1]\r\n    local bar = KEYS[2]\r\n```\r\n\r\nNote that the keys are retrieved by stupidly looking for the highest number that is found in the script code,\r\neven if you comment out a line of code that contains a high number. Dynamic values are not supported;\r\navoid confusion by keeping KEYS[*] at a single place, i.e. at the beginning of your file.\r\n\r\n```lua\r\n    -- example script two, rlh.keys() will return 99\r\n    local foo = KEYS[1]\r\n    -- commented line contains KEYS[99]\r\n```\r\n\r\n## RLH#clearCache()\r\n\r\nClears the entire cache, is the same as creating a fresh instance.\r\n\r\n```javascript\r\n    // clear the script cache\r\n\trlh.clearCache();\r\n```\r\n\r\n# TODO\r\n\r\n- Create a loading queue so you can issue multiple load commands in parallel.\r\n- Allow to create compiled files and store them in filesystem for debugging and caching.\r\n- Add bindings for popular redis clients, .sync() and .eval(), with config options\r\nto provide a 'client' and 'adapter' (=client type).\r\n- Reformat README.md for linebreaks -.-\r\n\r\n# Changelog\r\n\r\n## 0.2.0\r\n\r\nAdded RLH#keys() functionality by scanning through script code and picking the highest\r\nnumber that is written using KEYS[*] so you can pass it to your redis client.\r\n\r\n## 0.1.0\r\n\r\nInitial release.\r\n\r\n# License: MIT License\r\n\r\nCopyright (C) 2013 Geerten van Meel\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.",
  "bugs": {
    "url": "https://github.com/klovadis/redis-lua-helper/issues"
  },
  "_id": "redis-lua-helper@0.2.0",
  "dist": {
    "shasum": "2f8e71bff3cdbc4abbf38e1bebefcbb396224f02"
  },
  "_from": "redis-lua-helper@",
  "_resolved": "https://registry.npmjs.org/redis-lua-helper/-/redis-lua-helper-0.2.0.tgz"
}
